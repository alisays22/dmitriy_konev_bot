const { Composer } = require("telegraf");
const composer = new Composer();
const {  Person,Appointment,Service, Purchase} = require("../../connection/model/people")
const {emoji} = require("./orderFunction")
const {orderkeyboard} = require("./ordersKeyboard")
const {formatBookingTimes} = require("../../utils/dateUtils")
const {handleError} = require("../../../plugin/handleError")


composer.action("orders", async (ctx) => {
  try{
  const user = await Person.findOne({ where: { telegramId: ctx.from.id } });
  const pendingOrders = await Purchase.findAll({ where: { personId: user.id, status: 'confirmed' } });

  const lastOrders =  await Purchase.findAll({ where: { personId: user.id}, limit: 5,    
    include: [
    { model: Service, attributes: ["name", "time"] },
    { model: Appointment, attributes: ["serviceId"]}
  ],
  order: [['createdAt', 'DESC']] // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ createdAt –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è  
  })

    if (lastOrders.length > 0) {
      const orderDetails = await Promise.all(lastOrders.map(async (order, index) => {
        const orderEmoji = emoji[index % emoji.length];
        const { formattedDate, formattedStartTime, formattedEndTime } = formatBookingTimes(order);

        let orderStatus = '';
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –º–æ–¥–µ–ª–∏ Purchase
        if(order && order.status === 'confirmed') {
 orderStatus = '<code>üü¢ —Å—Ç–∞—Ç—É—Å: </code>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' 
        }else if(order && order.status === 'cancelled'){
          orderStatus = '<code>üî¥ —Å—Ç–∞—Ç—É—Å: </code>–û—Ç–∫–ª–æ–Ω—ë–Ω'
        }else{
          orderStatus ='<code>üü° —Å—Ç–∞—Ç—É—Å: </code>–û–∂–∏–¥–∞–Ω–∏–µ' 
        }
     
        if (order.serviceId === 1) {
          return `${orderEmoji} <b>${order.Service.name}</b>\n<code> 30 –º–∏–Ω</code>\n${orderStatus}`;
        } else {
          return `${orderEmoji} <b>${order.Service.name}</b>\n<code>${order.Service.time} –º–∏–Ω</code>\n${orderStatus}\n<code>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</code> ${formattedDate}\n<code>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</code> ${formattedStartTime}-${formattedEndTime}`;
        }
      }));

      await ctx.editMessageMedia({
        type: "photo",
        media: { source: "images/order.jpg" },
        caption: `<b>–ú–æ–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n${orderDetails.join("\n\n")}`,
        parse_mode: "HTML",
      }, orderkeyboard(lastOrders.length, pendingOrders.length > 0));//–æ—á–∏—Å—Ç–∫–∞ –º–æ–∏ –∑–∞–∫–∞–∑—ã –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 5

    } else {
      await ctx.editMessageCaption("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",orderkeyboard(lastOrders.length, pendingOrders.length > 0));
    }
  } catch (error) {
    await handleError(error, ctx, 'critical', __filename) 
  }
  });


module.exports = composer;
