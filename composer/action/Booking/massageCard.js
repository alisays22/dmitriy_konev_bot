const { Composer, Markup } = require("telegraf");
const composer = new Composer();

const {Service,Purchase,Person} = require("../../connection/model/people");
const{handleError} = require("../../../plugin/handleError")

async function choiceKeyboard (productId) {
  return {reply_markup: { inline_keyboard: [
    [{ text: "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å", callback_data: `day_${productId}` }],
    [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "choiceService" }]
  ],
  }
  }
}
    // –ö–∞—Ä—Ç–æ—á–∫–∞ –º–∞—Å—Å–∞–∂–∞ c –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω–æ–π
composer.action(/^choice_(\d+)/, async (ctx) => {
  try{
const productId = ctx.match[1];
const product = await Service.findOne({where:{id:productId}})

const existingUser = await Person.findOne({where: { telegramId: ctx.from.id },});
const purchase = await Purchase.findOne({where: {personId: existingUser.id, status: "pending"}})

if(purchase){
  await ctx.answerCbQuery("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",{show_alert: true});
  return; 
}else{
  await ctx.answerCbQuery();
 // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ–¥–ø–∏—Å–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 await ctx.editMessageMedia(
  {
    type: "photo",
    media: { url: `${product.imageURL}` },
    caption: `<b>${product.name}</b>\n<code>${product.time} –º–∏–Ω</code>\n\n<i>${product.description}</i>\n\n<b>–¶–µ–Ω–∞:</b> ${product.price} ‚ÇΩ`,
    parse_mode: "HTML",
  },
  await choiceKeyboard(product.id)
);
}
} catch (error) {
  await handleError(error, ctx, 'critical', __filename) 
}
});

module.exports = composer;


