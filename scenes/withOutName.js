const { Markup, Composer, Scenes,session } = require("telegraf");
const { Sequelize, DataTypes } = require("sequelize");
const Op = Sequelize.Op;

const {Person,Appointment,Service,Message,} = require("../composer/connection/model/people");
const {formatBookingTimes,} = require("../composer/utils/dateUtils");

const {getYesButtonMarkup,deleteButtonMarkup,choiceGuestName,} = require("../composer/utils/sceneButton");
const { deleteMessage } = require("../composer/utils/deleteMessageText");
const {banWords} = require("../composer/utils/banWords")
const {handleError} = require("../plugin/handleError")
const {workSchedule} = require("../composer/utils/dateUtils");


// –°—Ü–µ–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—Ç–µ–ª –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –∏–º—è
const oneStep = new Composer();

oneStep.action(/time_(.+)/, async (ctx) => {
  try {
    const selectedTime = ctx.match[1]; // –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:00:00

    const user = await Person.findOne({ where: { telegramId: ctx.from.id } });
    const selectedDate = await Appointment.findOne({where: { personId: user.id, status: "free" },});

    if (!selectedDate) {
      console.log("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    const available = await Appointment.findOne({where: { date: selectedDate.date, time: selectedTime, status: "booked" },});

    if (available) {
      await ctx.answerCbQuery(`‚ùå –í—Ä–µ–º—è ${selectedTime} –∑–∞–Ω—è—Ç–æ`, {show_alert: true,});
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
    const currentTime = new Date();
    const appointmentTime = new Date(selectedDate.date);
    appointmentTime.setHours(parseInt(selectedTime.split(":")[0]));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ –º–µ–Ω—å—à–µ 2 —á–∞—Å–æ–≤ –¥–æ –∑–∞–ø–∏—Å–∏
    const timeDifference = appointmentTime.getTime() - currentTime.getTime();
    const twoHoursInMilliseconds = 2 * 60 * 60 * 1000;

    if (timeDifference < twoHoursInMilliseconds) {
      await ctx.answerCbQuery(`‚¨úÔ∏è –ó–∞–ø–∏—Å—å –Ω–∞ 2—á –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`, {show_alert: true,});
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    const dayOfWeek = new Intl.DateTimeFormat("en-US", {
      weekday: "long",
    }).format(new Date(selectedDate.date));

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    const workHours = workSchedule[dayOfWeek];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
    if (!workHours.start || !workHours.end) {
      await ctx.answerCbQuery(`‚ùå –í —ç—Ç–æ—Ç –¥–µ–Ω—å –º—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º`, { show_alert: true,});
      return;
    }

    const startTime = new Date(selectedDate.date + " " + workHours.start);
    const endTime = new Date(selectedDate.date + " " + workHours.end);

    if (appointmentTime < startTime || appointmentTime > endTime) {
      await ctx.answerCbQuery(`‚ùå –í—Ä–µ–º—è ${selectedTime} –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã`,{ show_alert: true });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–∞ —á–∞—Å–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π
    const nextSlot1 = `${(parseInt(selectedTime.split(":")[0]) + 1)
      .toString()
      .padStart(2, "0")}:00:00`;
    const nextSlot2 = `${(parseInt(selectedTime.split(":")[0]) + 2)
      .toString()
      .padStart(2, "0")}:00:00`;

    const nextAvailable1 = await Appointment.findOne({
      where: { date: selectedDate.date, time: nextSlot1, status: "booked" },
    });
    const nextAvailable2 = await Appointment.findOne({
      where: { date: selectedDate.date, time: nextSlot2, status: "booked" },
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å –∏–ª–∏ —á–µ—Ä–µ–∑ —á–∞—Å
    if (nextAvailable1 || nextAvailable2) {
      await ctx.answerCbQuery(`‚¨úÔ∏è –ó–∞–ø–∏—Å—å –Ω–∞ 2—á –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`, {
        show_alert: true,
      });
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    await Appointment.upsert({
      id: selectedDate.id,
      personId: user.id,
      time: selectedTime,
      date: selectedDate.date,
      status: "free",
    });

    await Appointment.create({
      personId: user.id,
      serviceId: selectedDate.serviceId,
      date: selectedDate.date,
      time: nextSlot1,
      status: "free",
    });

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user.firstName || user.firstName === null) {
      ctx.replyWithHTML(`@${user.userName}, –Ω–∞–ø–∏—à–∏—Ç–µ <b>–∏–º—è</b> —Ç–æ–≥–æ –∫—Ç–æ –ø—Ä–∏–¥–µ—Ç –Ω–∞ —Ç–µ—Ä–∞–ø–∏—é.`);
      return ctx.wizard.next();
    } else {
      try{
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
      const messageChoiceTime = await ctx.editMessageReplyMarkup(
        await deleteButtonMarkup()
      );
      const messageYesNo = await ctx.replyWithHTML(`–ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ —Ç–µ—Ä–∞–ø–∏—é –∫–∞–∫ <b>${user.firstName}</b>?`,
        {
          reply_markup: getYesButtonMarkup(),
        }
      );
      const oldMessages = await Message.findAll({where: { personId: user.id },});

      if (oldMessages.length > 0) {
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await Promise.all(
          oldMessages.map(async (message) => {
            if (message.nameMessage === "messageChoiceTime") {
              await message.update({ messageId: messageChoiceTime.message_id });
            } else if (message.nameMessage === "messageYesNo") {
              await message.update({ messageId: messageYesNo.message_id });
            }
          })
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await Promise.all([
          Message.create({
            nameMessage: "messageChoiceTime",
            messageId: messageChoiceTime.message_id,
            personId: user.id,
          }),
          Message.create({
            nameMessage: "messageYesNo",
            messageId: messageYesNo.message_id,
            personId: user.id,
          }),
        ]);
      }
      return ctx.wizard.next();
    }catch(e){
      ctx.replyWithHTML("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ /start")
    }
    }
  } catch (error) {
    await handleError(error, ctx, 'critical', __filename) 
  }
});

const twoStep = new Composer();

twoStep.action(["yes", "no"], async (ctx) => {
  // try{
  await ctx.answerCbQuery();
  const user = await Person.findOne({ where: { telegramId: ctx.from.id } });
  const buttonText = ctx.match[0]; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

  if (buttonText === "yes") {
    await deleteMessage(ctx, user.id, "messageChoiceTime");
    await deleteMessage(ctx, user.id, "messageYesNo");
    if (user.phone) {

      const booking = await Appointment.findOne({where: { personId: user.id, status: "free" },});
      const service = await Service.findOne({where: { id: booking.serviceId },});

      const { formattedDate, formattedStartTime, formattedEndTime } =
        formatBookingTimes(booking);
      ctx.replyWithPhoto(
        { url: service.imageURL },
        {
          caption: `<b>‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ <b>${user.firstName}</b> –Ω–∞ <b>${formattedDate}</b> –≤ <b>${formattedStartTime}</b>\n–Ω–∞ —É—Å–ª—É–≥—É: <b><i>"${service.name}"</i></b> `,
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "aceptBooking" }],
              [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "clearBooking" }],
            ],
          },
        }
      );
      return ctx.scene.leave();
    } else {
      ctx.replyWithHTML(
        `<b>${user.firstName}</b>, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>+7XXXXXXXXXX</code>\n\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá</b>`,
        {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                  request_contact: true,
                  resize_keyboard: true,
                  one_time_keyboard: true,
                },
              ],
            ],
            force_reply: true,
          },
        }
      );
      ctx.wizard.next();
    }
  } else {
    await ctx.answerCbQuery();
    await deleteMessage(ctx, user.id, "messageChoiceTime");
    await deleteMessage(ctx, user.id, "messageYesNo");

    await ctx.replyWithHTML(`–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Ç–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–¥–µ—Ç –Ω–∞ —Ç–µ—Ä–∞–ø–∏—é`);
    ctx.wizard.selectStep(3) // –ø–µ—Ä–µ—Ö–æ–¥ –≤ fourStep
    return;
  }
// } catch (error) {
//   await handleError(error, ctx, 'critical', __filename) 
// }
});

const threeStep = new Composer();

threeStep.on("contact", async (ctx) => {
  try{
  const user = await Person.findOne({ where: { telegramId: ctx.from.id } });
  const booking = await Appointment.findOne({where: { personId: user.id, status: "free" },});
  const service = await Service.findOne({ where: { id: booking.serviceId } });

  const phoneNumber = ctx.message.contact.phone_number;
  await user.update({ phone: phoneNumber });

  const { formattedDate, formattedStartTime } = formatBookingTimes(booking);

  ctx.replyWithPhoto(
    { url: service.imageURL },
    {
      caption: `<b>‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ <b>${user.firstName}</b> –Ω–∞ <b>${formattedDate}</b> –≤ <b>${formattedStartTime}</b>\n–Ω–∞ —É—Å–ª—É–≥—É: <b><i>"${service.name}"</i></b> `,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "aceptBooking" }],
          [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "clearBooking" }],
        ],
      },
    }
  );
  return ctx.scene.leave();
} catch (error) {
  await handleError(error, ctx, 'critical', __filename) 
}
});


threeStep.on("text", async (ctx) => {
  try{
  const phone = ctx.message.text;
  let user = await Person.findOne({ where: { telegramId: ctx.from.id } });
  let booking = await Appointment.findOne({ where: { personId: user.id } });
  const service = await Service.findOne({ where: { id: booking.serviceId } });

  const { formattedDate, formattedStartTime } = formatBookingTimes(booking);

  // —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Ñ–æ—Ä–º–∞—Ç–∞–º:
// +7XXXXXXXXXX // +7 XXX XXX XX-XX // +7 (XXX) XXX-XX-XX // +7(XXX) XXX-XX-XX
const phoneRegex = /^\+7\d{10}$|^\+7\s\d{3}\s\d{3}\s\d{2}-\d{2}$|^\+7\s\(\d{3}\)\s\d{3}-\d{2}-\d{2}$|^\+7\(\d{3}\)\s\d{3}-\d{2}-\d{2}$/;

  const excludedNumbers = ["+7(999) 999-99-90", "+7(999) 999-99-99", "99999999999","+79999999999","+7(999)9999990",];

  if (excludedNumbers.includes(phone)) {
    ctx.replyWithHTML(`‚ö†Ô∏è –ù–æ–º–µ—Ä <b>${phone}</b> —É–∫–∞–∑–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π`);
    return
  } else if (phoneRegex.test(phone) === false) {
    ctx.replyWithHTML("‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã +/-.–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n\n<code>+7XXXXXXXXXX;\n+7 XXX XXX XX-XX;\n+7 (XXX) XXX-XX-XX;</code>");
    return
  } else if (phone.length > 19) {
    ctx.replyWithHTML("‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 19 —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–º –≤–∏–¥–µ");
    return
  } else {
    user.phone = phone;
    await user.save();

    const userName = user.guestName ? user.guestName : user.firstName;

    ctx.replyWithPhoto(
      { url: service.imageURL },
      {
        caption: `<b>‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ <b>${userName}</b> –Ω–∞ <b>${formattedDate}</b> –≤ <b>${formattedStartTime}</b>\n–Ω–∞ —É—Å–ª—É–≥—É: <b><i>"${service.name}"</i></b> `,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "aceptBooking" }],
            [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "clearBooking" }],
          ],
        },
      }
    );
  }
  return ctx.scene.leave();
} catch (error) {
  await handleError(error, ctx, 'critical', __filename) 
}
});

const fourStep = new Composer();

//–ó–∞–ø–∏—Å—å –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∏–º–µ–Ω–∏
fourStep.on("text", async (ctx) => {
  try{
const name = ctx.message.text;

if (name.length > 19) {
  ctx.replyWithHTML("‚ö†Ô∏è –ò–º—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–º –≤–∏–¥–µ");
  return
} else if (!/^[a-zA-Z–∞-—è–ê-–Ø]+$/.test(name)) {
  ctx.replyWithHTML("‚ö†Ô∏è –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ –±—É–∫–≤");
  return;
} else if (name.includes(" ")) {
  ctx.replyWithHTML("‚ö†Ô∏è –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤");
  return;
} else {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã
  banWords
  if (banWords.includes(name.toLowerCase())) {
    ctx.replyWithHTML("‚ö†Ô∏è –≠—Ç–æ —è–≤–ª—è–µ—Ç—å—Å—è —á–µ–º-—Ç–æ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–º");
    return;
  }

let user = await Person.findOne({ where: { telegramId: ctx.from.id } });
user.guestName = name
user.save()

  ctx.replyWithHTML(`–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>+7XXXXXXXXXX</code>`,);
  ctx.wizard.selectStep(2) // –ø–µ—Ä–µ—Ö–æ–¥ –≤ threeStep
}
} catch (error) {
  await handleError(error, ctx, 'critical', __filename) 
}
})


const twoScene = new Scenes.WizardScene(
  "twoWizard",
  oneStep,
  twoStep,
  threeStep,
  fourStep
);

module.exports = twoScene;
