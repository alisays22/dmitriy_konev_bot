const { Composer, Markup } = require("telegraf");
const composer = new Composer();

const { Service,Person,Purchase } = require("../../connection/model/people");
const {handleError} = require("../../../plugin/handleError")


// –ö–∞—Ä—Ç–æ—á–∫–∞ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
composer.action("free–°onsultation", async (ctx) => {
  try{
  const product = await Service.findOne({ where: { id: 1 } });
  
  await ctx.answerCbQuery();
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ–¥–ø–∏—Å–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  await ctx.editMessageMedia(
    {
      type: "photo",
      media: { url: `${product.imageURL}` },
      caption: `<b>${product.name}</b>\n<code>${product.time} –º–∏–Ω</code>\n\n${product.description}\n\n<b>–¶–µ–Ω–∞:</b> ${product.price} ‚ÇΩ`,
      parse_mode: "HTML",
    },
    {reply_markup: {
        inline_keyboard: [
          [{text: "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ë–ï–°–ü–õ–ê–¢–ù–£–Æ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ",callback_data: `freeSignUp`,},],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back" }],
        ],
      },
    }
  );
} catch (error) {
  await handleError(error, ctx, 'critical', __filename);
}
});


module.exports = composer;
