const { Composer, Markup } = require("telegraf");
const composer = new Composer();
const moment = require("moment"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É moment.js

const { Person, Appointment, Service,Purchase } = require("../../connection/model/people");

const {formatBookingTimes} = require("../../utils/dateUtils");
const {sleep} = require("../../../plugin/sleep")
const{handleError} = require("../../../plugin/handleError")
const {startMenu} = require("../start/startMenu")
const ADMIN = process.env.ADMIN_ID;

function getCancelButtonMarkup() {
  return {
    inline_keyboard: [
      [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancelFree" }],
    ],
  };
}

composer.action("aceptBooking", async (ctx) => {
  try{
  const user = await Person.findOne({ where: { telegramId: ctx.from.id } });
  const booking = await Appointment.findOne({ where: { personId: user.id, status: "free" } });
  const service = await Service.findOne({ where: { id: booking.serviceId } });

  const { formattedDate, formattedStartTime, formattedEndTime } = formatBookingTimes(booking);

  // –ù–∞–π—Ç–∏ –æ–±–µ –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç–µ
  const bookingsToUpdate = await Appointment.findAll({where: {personId: user.id,date: booking.date,
      time: [
        booking.time,
        moment(booking.time, 'HH:mm:ss').add(1, 'hours').format('HH:mm:ss')
      ],
      status: "free"
    }
  });

  if (bookingsToUpdate.length === 2) {
    await ctx.answerCbQuery("üñä –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã");

    user.visit++;
    await user.save();

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±–µ–∏—Ö –∑–∞–ø–∏—Å–µ–π
    for (const booking of bookingsToUpdate) {
      booking.status = "booked";
      await booking.save();
    }

    const purchase = await Purchase.create({ personId: user.id, serviceId: service.id, appointmentId: booking.id, date: booking.date, time: booking.time, status: "pending", totalPrice: service.price });
    purchase.save();
    const userName = user.guestName ? user.guestName : user.firstName;

    const textAcept = user.guestName ?   `` : `<b>${user.firstName} </b>,` 
    const message2 = await ctx.editMessageMedia(
      {
        type: "photo",
        media: { url: service.imageURL },
        caption: `<b>‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ </b>\n\n${textAcept}–∂–¥—É –í–∞—Å <b>${formattedDate}</b> –≤ <b>${formattedStartTime}</b>\n–Ω–∞ —É—Å–ª—É–≥—É: <b>"${service.name}"</b>\n\n<i>–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n*–ü—Ä–æ—Å–∏–º –Ω–µ —É–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>`,
        parse_mode: "HTML",
      },
      { reply_markup: getCancelButtonMarkup() }
    );

    const textSendAdmin = user.guestName ?   `<b><a href="t.me/${user.userName}">–∫–ª–∏–µ–Ω—Ç</a></b> –ø–æ–¥ –≥–æ—Å—Ç–µ–≤—ã–º –∏–º–µ–Ω–µ–º <b>${userName}</b>` : `<b><a href="t.me/${user.userName}">${userName}</a></b>` 

    // –ü–µ—Ä–µ—Å—ã–ª–ª–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const message = await ctx.telegram.sendMessage(
      ADMIN,
      `#–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø\n\n–ö –≤–∞–º –∑–∞–ø–∏—Å–∞–ª—Å—è ${textSendAdmin} –≤ <b>${formattedDate}</b> <b>${formattedStartTime}-${formattedEndTime}</b>\n–Ω–∞ —É—Å–ª—É–≥—É: <b>"${service.name}"</b>\n—Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: <b>${user.phone}</b>.\n\n<i>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∞ –∑–∞—Ç–µ–º —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º</i>`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ –ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `yes_${ctx.from.id}` }],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `no_${ctx.from.id}` }]
          ],
        },
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º messageId –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    purchase.messageId = message.message_id;
    purchase.messageId2 = message2.message_id;
    await purchase.save();

    user.guestName = "";
    user.phone = "";
    await user.save();

    await sleep(1000);
    await startMenu(ctx, user);
  } else {
    await ctx.answerCbQuery("ü•π –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∫—Ç–æ-—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è —Ä–∞–Ω—å—à–µ –≤–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", { show_alert: true });
    await ctx.deleteMessage();

    await Appointment.destroy({ where: { personId: user.id, status: "free" } });
    await sleep(1000);
    await startMenu(ctx, user);
  }
} catch (error) {
  await handleError(error, ctx, 'critical', __filename) 
}
});



module.exports = composer;
